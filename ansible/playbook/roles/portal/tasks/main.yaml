---
- name: install required packages on centos 
  package: name={{item}} state=present
  with_items:
    - mariadb
    - mariadb-server
    - mariadb-devel 
    - mariadb-libs
    - python-devel
    - gcc 
    - gcc-c++ 
    - make 
    - openssl-devel
    - openldap-devel
    - libselinux-python
    - git
  tags:
    - database
    - application
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'    

- name: install required packages on ubuntu
  package: name={{item}} state=present
  with_items:
    - git 
    - gcc
    - mariadb-server
    - libmysqlclient-dev
    - python-dev
    - screen
  tags:
    - database
    - application
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

- name: mariadb default character set for mariadb-5.5
  ini_file: dest=/etc/my.cnf.d/server.cnf section=mariadb-5.5 option={{item.name}} value={{item.value}}
  with_items:
    - {name: init_connect, value: '"SET collation_connection = utf8_general_ci"'}
    - {name: init_connect, value: '"SET NAMES utf8"'}
    - {name: character-set-server, value: utf8}
    - {name: collation-server, value: utf8_general_ci}
  tags:
    - database

- name: restart mariadb 
  service: name={{item}} state=restarted
  with_items:
    - mariadb
  tags:
    - database
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: restart mariadb 
  service: name={{item}} state=restarted
  with_items:
    - mysql
  tags:
    - database
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

- name: drop database on mariadb
  mysql_db: name={{ database_name}} state=absent
  ignore_errors: true
  tags:
    - database

- name: create database on mariadb
  mysql_db: name={{ database_name}} state=present
  tags:
    - database

- name: make mariadb account 
  mysql_user: host={{ item }} priv="{{database_name}}.*:ALL" login_user=root name={{ database_user}} password={{ database_pass}}
  with_items:
    - "{{ database_host}}"
 #   - "10.139.%"
  tags:
    - database

- name: reset for all modification 
  become: no
  remote_user: "{{ user_name}}"
  shell: git checkout -- * chdir="{{basedir}}"
  ignore_errors: true
  tags:
    - application  

- name: clone source from git repos
  become: no
  remote_user: "{{ user_name}}"
  git: repo={{repo_url}} dest={{basedir}} clone=yes version={{repo_branch}} force=yes
  register: git_clone_status
  ignore_errors: true
  tags:
    - application  

- name: git pull from remote repos
  become: no
  remote_user: "{{ user_name}}"
  shell: git pull chdir="{{basedir}}"
  when: git_clone_status.changed != false
  ignore_errors: true
  tags:
    - application  

- name: install requirements on portal 
  pip: requirements={{basedir}}/requirements.txt chdir={{ basedir}}
  tags:
    - application  

- name: update mysql ini file
  become: no
  remote_user: "{{ user_name}}"
  ini_file: dest={{ dbconfig}} section=mysql option={{item.name}} value={{item.value}}
  with_items:
    - { name: hostname, value: "{{ database_host}}" }
    - { name: dbname, value: "{{database_name}}" }
    - { name: username, value: "{{database_user}}" }
    - { name: password, value: "{{database_pass}}" }
    - { name: port, value: "{{database_port}}" }
  tags:
    - database

- name: django makemigrations
  become: no
  remote_user: "{{ user_name}}"
  shell: python manage.py makemigrations chdir={{basedir}}
  tags:
    - database
    - application

- name: django migrate
  become: no
  remote_user: "{{ user_name}}"
  shell: python manage.py migrate chdir={{basedir}}
  tags:
    - database
    - application

- name: copy sql script 
  become: no
  remote_user: "{{ user_name}}"
  template: src=basic_conf.j2 dest=/tmp/basic_conf.sql force=yes
  tags:
    - database

- name: copy cloudux-celery service 
  template: src=cloudux-celery.j2 dest=/usr/lib/systemd/system/cloudux-celery.service force=yes
  tags:
    - application
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: enable systemctl daemon-reload & enable cloudux-celery
  shell: systemctl daemon-reload && systemctl enable cloudux-celery && systemctl start cloudux-celery
  tags:
    - application
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: copy archon service (ubuntu)
  template: src=cloudx-celery.sh dest=/etc/init.d mode="0755" force=yes
  tags:
    - application
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

- name: register as service
  shell: update-rc.d cloudx-celery.sh defaults && service cloudx-celery.sh start
  tags:
    - application
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'  

- name: execute sql queries 
  become: no
  remote_user: "{{ user_name}}"
  shell: /usr/bin/mysql --user={{database_user}} --database={{ database_name}} --password={{database_pass}} < /tmp/basic_conf.sql 
  tags:
    - database
